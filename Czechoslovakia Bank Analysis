CREATE DATABASE BANK;
USE DATABASE BANK;

CREATE TABLE DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants	INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
) ;

CREATE OR REPLACE TABLE ACCOUNT(
account_id INT PRIMARY KEY,
district_id	INT,
frequency	VARCHAR(40),
Date DATE ,
Account_type VARCHAR(40),
card_assigned varchar(30),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE TABLE ORDER_LIST(
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);

CREATE OR REPLACE TABLE LOAN(
loan_id	INT ,
account_id	INT,
date date,
amount	INT,
duration	INT,
payments	INT,
status VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);

CREATE OR REPLACE TABLE TRANSACTIONS(
trans_id INT,	
account_id	INT,
Date	DATE,
Type	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
account INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));

CREATE OR REPLACE TABLE CLIENT(
client_id	INT PRIMARY KEY,
birth_date	DATE,
district_id INT,
Sex	CHAR(10),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE OR REPLACE  TABLE DISPOSITION(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
type CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);

CREATE OR REPLACE TABLE CARD(
card_id	INT PRIMARY KEY,
disp_id	INT,
type CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references DISPOSITION(disp_id)
);

-- Creation of storage integration using role URL and s3 bucket name
CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::948328479418:role/bankawsrole'
STORAGE_ALLOWED_LOCATIONS =('s3://bankaws');

desc integration s3_int;

CREATE OR REPLACE STAGE BANK
URL ='s3://bankaws'
file_format= Public.csv_fileformat
storage_integration =s3_int;

LIST @BANK;

SHOW STAGES;

-- Connecting 8 pipelines for 8 folders
CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISTRICT"
FROM '@BANK/District/'
FILE_FORMAT = Public.csv_fileformat;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ACCOUNT"
FROM '@BANK/Account/'
FILE_FORMAT = Public.csv_fileformat;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CARD"
FROM '@BANK/Card/'
FILE_FORMAT = Public.csv_fileformat;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CLIENT"
FROM '@BANK/Client/'
FILE_FORMAT = Public.csv_fileformat;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISPOSITION AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISPOSITION"
FROM '@BANK/Disposition/'
FILE_FORMAT = Public.csv_fileformat;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."LOAN"
FROM '@BANK/Loan/'
FILE_FORMAT = Public.csv_fileformat;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER_LIST AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ORDER_LIST"
FROM '@BANK/Order/'
FILE_FORMAT = Public.csv_fileformat;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANSACTIONS AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."TRANSACTIONS"
FROM '@BANK/Transactions/'
FILE_FORMAT = Public.csv_fileformat;

SHOW PIPES;

-- Checking the status of data from AWS to Snowflake

alter pipe BANK_SNOWPIPE_CARD refresh;
alter pipe BANK_SNOWPIPE_ACCOUNT refresh;
alter pipe BANK_SNOWPIPE_CLIENT refresh;
alter pipe BANK_SNOWPIPE_LOAN refresh;
alter pipe BANK_SNOWPIPE_ORDER_LIST refresh;
alter pipe BANK_SNOWPIPE_DISTRICT refresh;
alter pipe BANK_SNOWPIPE_DISPOSITION refresh;
alter pipe BANK_SNOWPIPE_TRANSACTIONS refresh;

-- TOTAL ROWS FOR EACH TABLE

SELECT count(*) FROM DISTRICT ;
SELECT count(*) FROM ACCOUNT ;
SELECT count(*) FROM CARD ;
SELECT count(*) FROM CLIENT ;
SELECT count(*) FROM DISPOSITION ;
SELECT count(*) FROM LOAN ;
SELECT count(*) FROM ORDER_LIST ;
SELECT count(*) FROM TRANSACTIONS ;

-- TOTAL RECORDS FOR EACH TABLE

select * from DISTRICT;
select * from DISPOSITION;
select * from CARD;
select * from LOAN;
SELECT * FROM ORDER_LIST;
SELECT * FROM ACCOUNT;
SELECT * FROM CLIENT;
SELECT * FROM TRANSACTIONS;
-----------------------------------------------------------------------------------------------
-- YEARS AND RESPECTIVE NO_OF_TRANSACTIONS DONE

SELECT YEAR(DATE),COUNT(*) AS NUM_OF_TXNS
FROM TRANSACTIONS
GROUP BY 1
ORDER BY 1 desc;
----------------------------------------------------------------------------------------
-- ADDING ONE YEAR IN TRANSACTIONS TABLE 

UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1,DATE)
WHERE YEAR(DATE) IN (2021,2020,2019,2018,2017,2016);

-- CHECKING MINIMUM AND MAXIMUM DATE FROM TRANSACTIONS

SELECT MIN(DATE),MAX(DATE) FROM TRANSACTIONS;
--------------------------------------------------------------------------------------------------------------------------------------------

-- UPDATING BANK NAME WHERE BANK IS NULL

UPDATE TRANSACTIONS 
SET BANK = 'SKY BANK' WHERE BANK IS NULL AND YEAR(DATE) = '2022';

UPDATE TRANSACTIONS 
SET BANK = 'DBS BANK' WHERE BANK IS NULL AND YEAR(DATE) = '2021';

UPDATE TRANSACTIONS 
SET BANK = 'NORTHERN BANK' WHERE BANK IS NULL AND YEAR(DATE) = '2019';

UPDATE TRANSACTIONS 
SET BANK = 'SOUTHERN BANK' WHERE BANK IS NULL AND YEAR(DATE) = '2018';

UPDATE TRANSACTIONS 
SET BANK = 'ADB BANK' WHERE BANK IS NULL AND YEAR(DATE) = '2017';
-------------------------------------------------------------------------------------------------------------------
-- MALE AND FEMALE PERCENT

SELECT 
ROUND(SUM(CASE WHEN SEX='male' THEN 1 ELSE 0 END)/COUNT(SEX)*100,2) AS MALE_CLIENT,
ROUND(SUM(CASE WHEN SEX='Female' THEN 1 ELSE 0 END)/COUNT(SEX)*100,2) AS FEMALE_CLIENT
FROM CLIENT;
------------------------------------------------------------------------------------------------------------------------------------
-- ADD AGE COLUMN IN CLIENT TABLE

ALTER TABLE CLIENT ADD COLUMN AGE INT;
UPDATE CLIENT
SET AGE = DATEDIFF('YEAR',BIRTH_DATE,'2022-12-19');
--------------------------------------------------------------------------------------------------------------------------------------
-- DEMOGRAPHIC PROFILE OF THE BANK'S CLIENTS AND HOW DOES IT VARY ACROSS DISTRICTS

CREATE OR REPLACE TABLE CZECHO_DEMOGRAPHIC_PROFILE_KPI AS
SELECT D.DISTRICT_CODE,D.DISTRICT_NAME,D.AVERAGE_SALARY,ROUND(AVG(C.AGE),0) AS AVG_AGE,
SUM(CASE WHEN SEX='Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT,SUM(CASE WHEN SEX='male' THEN 1 ELSE 0 END) AS MALE_CLIENT,
ROUND((FEMALE_CLIENT/MALE_CLIENT)*100,2) AS FEMALE_MALE_RATIO,COUNT(*) AS TOTAL_CLIENT
FROM DISTRICT D
INNER JOIN CLIENT C ON D.DISTRICT_CODE = C.DISTRICT_ID
GROUP BY 1,2,3
ORDER BY 1;

SELECT * FROM CZECHO_DEMOGRAPHIC_PROFILE_KPI;
---------------------------------------------------------------------------------------------------------------------------------------
-- BANKS PERFORMANCE OVER THE YEARS 

SELECT LATEST_TXN_DATE,COUNT(*) AS TOT_TXNS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;

CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
   MONTH(DATE) AS TXN_MONTH,
   MAX(DATE) AS LATEST_TXN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LTD.LATEST_TXN_DATE
  ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH;

SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE;
------------------------------------------------------------------------------------------
-- COMMON TYPES OF ACCOUNTS AND HOW DO THEY DIFFER IN TERMS OD USAGE AND PROFITABLITY

CREATE TABLE TYPES_OF_ACCOUNTS AS(
SELECT A.ACCOUNT_TYPE,COUNT(*) AS NUM_OF_TXNS,
AVG(T.BALANCE) AS AVG_BALANCE,
AVG(CASE WHEN T.AMOUNT > 0 THEN T.AMOUNT ELSE 0 END) AS AVG_PROFITABILITY
FROM ACCOUNT A
JOIN TRANSACTIONS T
ON A.ACCOUNT_ID = T.ACCOUNT_ID
GROUP BY 1 );

--------------------------------------------------------------------------------
-- BANKING KPI
CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT  ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALWB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM TRANSACTIONS AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;

SELECT * FROM BANKING_KPI;
---------------------------------------------------------------------------------------
-- TYPES OF CARDS ARE MORE FREQUENTLY USED BY BANK'S CLIENTS AND SHOW PROFITABLITY

CREATE OR REPLACE TABLE TYPES_OF_CARDS AS(
WITH CARD_USAGE AS (
SELECT
CARD_ASSIGNED,
COUNT(*) AS NUM_USES
FROM ACCOUNT
GROUP BY CARD_ASSIGNED
),
CARD_PROFIT AS (
SELECT
ACCOUNT.CARD_ASSIGNED,
SUM(TRANSACTIONS.AMOUNT) AS TOTAL_SPENT,
SUM(TRANSACTIONS.BALANCE) AS TOTAL_BALANCE
FROM ACCOUNT
JOIN TRANSACTIONS ON ACCOUNT.ACCOUNT_ID = TRANSACTIONS.ACCOUNT_ID
GROUP BY ACCOUNT.CARD_ASSIGNED
)
SELECT
CARD_USAGE.CARD_ASSIGNED,
CARD_USAGE.NUM_USES,
CARD_PROFIT.TOTAL_SPENT,
CARD_PROFIT.TOTAL_BALANCE,
(CARD_PROFIT.TOTAL_BALANCE - CARD_PROFIT.TOTAL_SPENT) AS PROFITABILITY
FROM CARD_USAGE
JOIN CARD_PROFIT ON CARD_USAGE.CARD_ASSIGNED = CARD_PROFIT.CARD_ASSIGNED
ORDER BY CARD_USAGE.NUM_USES DESC );

SELECT * FROM TYPES_OF_CARDS;
-----------------------------------------------------------------------------

